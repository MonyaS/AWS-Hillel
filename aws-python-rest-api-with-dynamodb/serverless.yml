service: todos

#frameworkVersion: ">=2.24.0"

provider:
  name: aws
  runtime: python3.10
  stage: salabai
  region: us-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    USER_TABLE: ${self:service}-users
    SECRET_KEY: HXpNzkha/KgJMbhz2bqohpoLNtegPIH72iOwqyVkJ5JvP135OLCt7bwQ/5pQfXUvTOrLkOlfBLRmoJ450Q9qVNpgvwxj8cY2t9nI1AFx6Zg=
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"

functions:

  test:
    handler: todos/test.test
    events:
      - http:
          path: test
          method: post
          cors: true

  create_user:
    handler: auth/create_user.create_user
    events:
      - http:
          path: create-user
          method: post
          cors: true

  login:
    handler: auth/login_user.login_user
    events:
      - http:
          path: login
          method: post
          cors: true


  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list_lambda
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  check:
    handler: todos/check.mark_checked
    events:
      - http:
          path: todos/check/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        GlobalSecondaryIndexes: # Добавление секции GSI
          - IndexName: UsernameIndex  # Название индекса
            KeySchema:
              - AttributeName: user
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"  # Можно изменить на KEYS_ONLY или INCLUDE
            ProvisionedThroughput: # Определение пропускной способности для GSI
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    UsersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


plugins:
  - serverless-python-requirements
